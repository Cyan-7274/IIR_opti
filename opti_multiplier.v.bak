module opti_multiplier(
    input  wire         clk,
    input  wire         rst_n,
    input  wire signed [15:0] a, // Q2.14
    input  wire signed [15:0] b, // Q2.14
    input  wire         valid_in,
    output reg  signed [15:0] p, // Q2.14
    output reg          valid_out
);

    // ========== 声明区 ==========
    reg signed [15:0] a_r, b_r;
    reg valid_r;

    wire signed [18:0] a_ext;
    wire signed [33:0] pp [0:8];

    wire signed [33:0] fa1_s0, fa1_c0, fa1_s1, fa1_c1, fa1_s2, fa1_c2;
    reg  signed [33:0] fa1_s0_r, fa1_c0_r, fa1_s1_r, fa1_c1_r, fa1_s2_r, fa1_c2_r;
    reg valid_r1;

    wire signed [33:0] fa2_s, fa2_c;
    wire signed [33:0] fa3_s, fa3_c;
    wire signed [33:0] fa4_s, fa4_c;
    wire signed [33:0] fa5_s, fa5_c;
    wire signed [33:0] sum_final;
    wire [4:0] sat_hi;
    wire signed [15:0] result_sat;

    // ========== T0: 输入锁存 ==========
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            a_r <= 16'd0;
            b_r <= 16'd0;
            valid_r <= 1'b0;
        end else begin
            a_r <= a;
            b_r <= b;
            valid_r <= valid_in;
        end
    end

    // ========== T0: Booth编码部分积 ==========
    assign a_ext = {a_r[15], a_r[15], a_r, 1'b0};
    assign pp[0] = booth_pp(a_ext[2:0],     b_r, 0);
    assign pp[1] = booth_pp(a_ext[4:2],     b_r, 1);
    assign pp[2] = booth_pp(a_ext[6:4],     b_r, 2);
    assign pp[3] = booth_pp(a_ext[8:6],     b_r, 3);
    assign pp[4] = booth_pp(a_ext[10:8],    b_r, 4);
    assign pp[5] = booth_pp(a_ext[12:10],   b_r, 5);
    assign pp[6] = booth_pp(a_ext[14:12],   b_r, 6);
    assign pp[7] = booth_pp(a_ext[16:14],   b_r, 7);
    assign pp[8] = booth_pp(a_ext[18:16],   b_r, 8);

    // ========== T0: Wallace树一级 ==========
    fa34 fa1_0 (.a(pp[0]), .b(pp[1]), .cin(pp[2]), .sum(fa1_s0), .cout(fa1_c0));
    fa34 fa1_1 (.a(pp[3]), .b(pp[4]), .cin(pp[5]), .sum(fa1_s1), .cout(fa1_c1));
    fa34 fa1_2 (.a(pp[6]), .b(pp[7]), .cin(pp[8]), .sum(fa1_s2), .cout(fa1_c2));

    // ========== T0: Wallace树一级锁存 ==========
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            fa1_s0_r <= 34'd0; fa1_c0_r <= 34'd0;
            fa1_s1_r <= 34'd0; fa1_c1_r <= 34'd0;
            fa1_s2_r <= 34'd0; fa1_c2_r <= 34'd0;
            valid_r1 <= 1'b0;
        end else begin
            fa1_s0_r <= fa1_s0; fa1_c0_r <= fa1_c0;
            fa1_s1_r <= fa1_s1; fa1_c1_r <= fa1_c1;
            fa1_s2_r <= fa1_s2; fa1_c2_r <= fa1_c2;
            valid_r1 <= valid_r;
        end
    end

    // ========== T1: Wallace树后级 ==========
    fa34 fa2_0 (.a(fa1_s0_r), .b(fa1_c0_r <<< 1), .cin(fa1_s1_r), .sum(fa2_s), .cout(fa2_c));
    fa34 fa3_0 (.a(fa1_c1_r <<< 1), .b(fa1_s2_r), .cin(fa1_c2_r <<< 1), .sum(fa3_s), .cout(fa3_c));
    fa34 fa4_0 (.a(fa2_s), .b(fa2_c <<< 1), .cin(fa3_s), .sum(fa4_s), .cout(fa4_c));
    fa34 fa5_0 (.a(fa3_c <<< 1), .b(fa4_c <<< 1), .cin(fa4_s), .sum(fa5_s), .cout(fa5_c));

    assign sum_final = fa5_s + (fa5_c <<< 1);

    assign sat_hi = sum_final[33:29];
    assign result_sat = (sat_hi == 5'b00000 || sat_hi == 5'b11111) ? sum_final[29:14] :
                        (sum_final[33] ? 16'h8000 : 16'h7FFF);

    // ========== T1: 输出锁存 ==========
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            p <= 16'd0;
            valid_out <= 1'b0;
        end else begin
            p <= result_sat;
            valid_out <= valid_r1;
        end
    end

    // ========== Booth编码函数 ==========
    function [33:0] booth_pp;
        input [2:0] code;
        input signed [15:0] b;
        input integer j;
        begin
            case (code)
                3'b000, 3'b111: booth_pp = 34'sd0;
                3'b001, 3'b010: booth_pp = $signed(b) <<< (2*j);
                3'b011:         booth_pp = $signed(b) <<< (2*j+1);
                3'b100:         booth_pp = -($signed(b) <<< (2*j+1));
                3'b101, 3'b110: booth_pp = -($signed(b) <<< (2*j));
                default:        booth_pp = 34'sd0;
            endcase
        end
    endfunction

endmodule

module fa34(
    input  wire signed [33:0] a,
    input  wire signed [33:0] b,
    input  wire signed [33:0] cin,
    output wire signed [33:0] sum,
    output wire signed [33:0] cout
);
    assign sum  = a ^ b ^ cin;
    assign cout = (a & b) | (a & cin) | (b & cin);
endmodule